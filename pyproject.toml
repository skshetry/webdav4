[build-system]
build-backend = "hatchling.build"
requires = [
  "hatch-vcs",
  "hatchling",
]

[project]
name = "webdav4"
description = "WebDAV client library with an fsspec-based filesystem and a CLI"
readme = "README.md"
keywords = [
  "fsspec",
  "webdav",
  "webdav-cli",
  "webdav-client",
]
license = "MIT"
license-files = { paths = [ "LICENSE" ] }
authors = [
  { name = "Saugat Pachhai", email = "suagatchhetri@outlook.com" },
]
requires-python = ">=3.8"
classifiers = [
  "Development Status :: 4 - Beta",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]
dynamic = [
  "version",
]
dependencies = [
  "httpx<1,>=0.20",
  "python-dateutil>=2.8.1",
]
optional-dependencies.all = [
  "webdav4[fsspec,http2]",
]
optional-dependencies.dev = [
  "webdav4[docs,fsspec,http2,qa,tests]",
]
optional-dependencies.docs = [
  "furo==2024.7.18",
  "myst-parser>=3,<4",
  "sphinx>=7,<8",
  "sphinx-copybutton==0.5.2",
]
optional-dependencies.fsspec = [
  "fsspec>=2021.7",
]
optional-dependencies.http2 = [
  "httpx[http2]<1,>=0.20",
]
optional-dependencies.qa = [
  "mypy==1.10.1",
  "pre-commit",
  "types-colorama",
  "types-python-dateutil",
]
optional-dependencies.tests = [
  "cheroot",
  "colorama",
  "pytest",
  "pytest-cov",
  "pytest-xdist",
  "typing-extensions",
  "wsgidav",
]
urls."Bug Tracker" = "https://github.com/skshetry/webdav4/issues"
urls.Documentation = "https://skshetry.github.io/webdav4"
urls."Source Code" = "https://github.com/skshetry/webdav4"
scripts.dav = "webdav4.cli:main"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/webdav4/_version.py"

[tool.hatch.build.targets.wheel]
packages = [ "src/webdav4" ]

[tool.ruff]
show-fixes = true
format.preview = true

format.docstring-code-format = true
lint.select = [
  "ASYNC",  # flake8-async
  "B",      # flake8-bugbear
  "BLE",    # flake8-blind-except
  "C4",     # flake8-comprehensions
  "C90",    # mccabe
  "DTZ",    # flake8-datetimez
  "E",      # pycodestyle - Error
  "EXE",    # flake8-executable
  "F",      # pyflakes
  "FLY",    # flynt
  "FURB",   # refurb
  "G",      # flake8-logging-format
  "I",      # isort
  "ICN",    # flake8-import-conventions
  "INP",    # flake8-no-pep420
  "ISC",    # flake8-implicit-str-concat
  "LOG",    # flake8-logging
  "N",      # pep8-naming
  "NPY",    # numpy
  "PERF",   # perflint
  "PGH",    # pygrep-hooks
  "PIE",    # flake8-pie
  "PL",     # pylint
  "PYI",    # flake8-pyi
  "Q",      # flake8-quotes
  "RET",    # flake8-return
  "RSE",    # flake8-raise
  "RUF",    # ruff rules
  "RUF022", # unsorted-dunder-all
  "RUF023", # unsorted-dunder-slots
  "RUF025", # unnecessary-dict-comprehension-for-iterable
  "RUF027", # missing-f-string-syntax
  "RUF030", # assert-with-print-message
  "RUF101", # redirected-noqa
  "S",      # flake8-bandit
  "SIM",    # flake8-simplify
  "SLOT",   # flake8-slots
  "T10",    # flake8-debugger
  "TCH",    # flake8-type-checking
  "TID",    # flake8-tidy-imports
  "TRY004", # type-check-without-type-error
  "TRY201", # verbose-raise
  "TRY302", # useless-try-except
  "TRY401", # verbose-log-message
  "UP",     # pyupgrade
  "W",      # pycodestyle - Warning
  "YTT",    # flake8-2020
]
lint.ignore = [
  "ISC001",  # single-line-implicit-string-concatenation, incompatible with ruff format
  "PERF203", # perflint - try-except-in-loop, irrelevant for Python>=3.11
  "PGH003",
  "PLR2004", # magic-value-comparison
  "PLW2901", # redefined-loop-name
  "RET502",  # implicit-return-value
  "RET503",  # implicit-return
  "S101",    # assert
  "SIM105",  # suppressible-exception
  "SIM108",  # if-else-block-instead-of-if-exp
  "SIM117",  # multiple-with-statements
]
lint.explicit-preview-rules = true
lint.per-file-ignores."docs/**" = [
  "INP001",
]
lint.per-file-ignores."tests/**" = [
  "DTZ002",
  "S106",
  "S314",
]
lint.flake8-type-checking.strict = true
lint.isort.known-first-party = [ "webdav4" ]
lint.preview = true

[tool.codespell]
ignore-words-list = "cachable"

[tool.pyproject-fmt]
max_supported_python = "3.13"

[tool.pytest.ini_options]
addopts = "-ra -nauto -cov=src,tests"

[tool.coverage.run]
parallel = true
branch = true
concurrency = [ "multiprocessing" ]
source = [ "webdav4", "tests" ]

[tool.coverage.report]
show_missing = true
exclude_lines = [
  "if __name__ == .__main__.:",
  "if typing.TYPE_CHECKING:",
  "if TYPE_CHECKING:",
  "pass",
  "raise NotImplementedError",
  "pragma: no cover",
]

[tool.coverage.paths]
source = [ "src", "*/site-packages" ]

[tool.mypy]
python_version = "3.8"
show_column_numbers = true
# be strict
disallow_untyped_calls = true
warn_return_any = true
strict_optional = true
warn_no_return = true
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true
files = [ "src/webdav4", "tests", "docs" ]
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = [ "_version", "fsspec.*", "wsgidav.*", "IPython" ]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [ "tests.*" ]
disallow_untyped_defs = false
disallow_incomplete_defs = false
warn_unused_ignores = false
